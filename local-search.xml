<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文本查看处理工具简介</title>
    <link href="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="文本查看工具"><a href="#文本查看工具" class="headerlink" title="文本查看工具"></a>文本查看工具</h1><p>  在linux操作系统的学习中，除了对文件修改外，我们最多的操作就是对文件的查看。在文件查看方面，linux也是有着众多的工具</p><h1 id="1、查看文本文件内容"><a href="#1、查看文本文件内容" class="headerlink" title="1、查看文本文件内容"></a>1、查看文本文件内容</h1><div class="code-wrapper"><pre><code class="hljs"># 1.1、cat工具通过cat我们可以查看到文本内容，但是如果内容过多，则会一次全部展示出来，需要进行翻屏或滑动鼠标滚轮查看：格式： </code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/1.png" class=""><div class="code-wrapper"><pre><code class="hljs">如上图：常用选项如下：-A：显示所有控制符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/2.png" class=""><div class="code-wrapper"><pre><code class="hljs">-b：非空行编号</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/3.png" class=""><div class="code-wrapper"><pre><code class="hljs">-E：显示行结束符$</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/4.png" class=""><div class="code-wrapper"><pre><code class="hljs">-n：对显示出的所有内容进行行号编辑并展示，类比-b可以看到-n将空行也进行了编号</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/5.png" class=""><div class="code-wrapper"><pre><code class="hljs">-s：把将要显示的内容中，连续的多行空格压缩为一行，先看源文件的4，5行为连续空行</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/6.png" class=""><div class="code-wrapper"><pre><code class="hljs">使用参数-s后</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/7.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.2、nl工具类似于cat -b，默认对于显示内容的非空行进行编号</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/8.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.3、tac工具功能如名，对比cat，tac前后取反，所以查看到的文本内容也是反的。同样的文档原本cat显示的第一行为tac显示的最后一行，如下图：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/9.png" class=""><div class="code-wrapper"><pre><code class="hljs">tac的格式与cat类似，这里不做赘述了# 1.4、rev工具如果说tac和cat工具是将原本文档排序的顺序，按照行号反向显示，那么rev工具，则是将原本显示的内容，按照行为基准，逆行显示，如下图：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/10.png" class=""><div class="code-wrapper"><pre><code class="hljs">格式如cat，参数没有特别的用途，在此不做总结# 1.5、非文本文件内容查看在这里可以简单使用一个工具 filefile工具可以用于查看文档的类型，看是否是文本文件，甚至可以查看是linux文本还是windows的文本。在这里，我们上传一个windows的TXT文本进入，进行对比：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/11.png" class=""><div class="code-wrapper"><pre><code class="hljs">如上图，为何说携带CRLF的便是windows的文本呢？这是因为，在linux中有换行，没有回车换行。我们通过ASCII映射表查看一下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/12.png" class=""><div class="code-wrapper"><pre><code class="hljs">看上图，在ASCII表中，CR，LF对应\r\n，即回车换行，linux中仅存在换行\n，当然，通过上面讲的命令cat -v也能确定是windows或linux文本：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/13.png" class=""><div class="code-wrapper"><pre><code class="hljs">可以看到^M （\r的十六进制为0D，对应的控制符为^M）</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/14.png" class=""><div class="code-wrapper"><pre><code class="hljs">对于windows的文本，我们尽量避免出现在linux中进行操作，否则容易报错，且通过vi等工具不一定能够发现（部分vi/vim版本在编辑windows的文本时，会提示dos）如果真的误将windows文本加入到了linux中，可用dos2unix工具，将文本转换为linux文本。该工具需要安装</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/15.png" class=""><div class="code-wrapper"><pre><code class="hljs">关于文件是否文本文件的区别方法介绍好了以后，看一下对于非文本文件如何查看：工具：hexdump  格式如下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/16.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用的参数选项如下： -b              one-byte octal display#单字节八进制显示 -c              one-byte character display#单字节字符显示 -C              canonical hex+ASCII display#规范化 十六进制+ASCII 显示 -d              two-byte decimal display#两字节十进制显示 -o              two-byte octal display#两字节八进制显示 -x              two-byte hexadecimal display#两字节十六进制显示 -e format       format string to be used for displaying data#格式 用于显示数据的格式字符串 -f format_file  file that contains format strings#格式文件 包含格式字符串的文件 -n length       interpret only length bytes of input#长度 只解释输入的指定长度个字节 -s offset       skip offset bytes from the beginning#偏移 跳过开头指定长度个字节 -v              display without squeezing similar lines#显示时不压缩相似的行 -V              output version information and exit#显示此帮助并退出    举例：1）、编辑文档a.txt，内容为abcd ABCD,通过hexdump查看，可以同时看到对应的十六进制以及ASCII显示：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/17.png" class=""><div class="code-wrapper"><pre><code class="hljs">2）、查看mbr引导的磁盘前512字节内容。针对MBR引导方式安装的linux，前512字节分别包含了446个字节的引导信息，4个16字节的主分区等信息，以及最后2个字节的55AA标记位通过hexdump我们可以查看具体的内容，也便于后续进行操作以及备份，举例：通过fisk -l来查看虚机是否MBR引导（查看Disklabel type是dos还是gpt）:</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/18.png" class=""><div class="code-wrapper"><pre><code class="hljs">明确是MBR引导，查看前512字节内容：hexdump -C -n 512 /dev/nvme0n1</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/19.png" class=""><h1 id="2、分页查看文本文件内容"><a href="#2、分页查看文本文件内容" class="headerlink" title="2、分页查看文本文件内容"></a>2、分页查看文本文件内容</h1><div class="code-wrapper"><pre><code class="hljs"># 2.1、more工具more工具可以实现分页的方式查看文件，也可以配合管道符，实现输出信息的分页，其使用格式：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/20.png" class="">    <div class="code-wrapper"><pre><code class="hljs">常用参数：-d：显示翻页和退出的帮助提示</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/21.png" class=""><div class="code-wrapper"><pre><code class="hljs">-p：当使用space空格键切换页面的时候，不以滚动的方式显示每一页，是清除当页直接显示下一页内容</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/22.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 2.1、less工具less工具的功能与more类似，同时，less工具是man命令使用的分页器。同more一样，在查看的时候，可以使用搜索，举例：在vimrc文件中，搜索定位hlsearch：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/23.png" class=""><h1 id="3、部分文本文件内容查看"><a href="#3、部分文本文件内容查看" class="headerlink" title="3、部分文本文件内容查看"></a>3、部分文本文件内容查看</h1><p>  很多时候，我们会遇到只想查看文本文件的部分内容，如文本的最前面几行，或者文本的最后几行（譬如，想查看日志的最新记录，可以观察日志的最后几行内容）<br>    # 3.1、头部内容查看head工具<br>    head工具的格式：</p><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/24.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用的参数：-c #：获取指定的前#个字符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/25.png" class=""><div class="code-wrapper"><pre><code class="hljs">-n #：获取指定的前#行，如果#为负数，则表示获取的是从文件头部到文件尾部的倒数第#行之间的行数，不包含倒数第#行</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/26.png" class=""><div class="code-wrapper"><pre><code class="hljs">-#：同上，#此时为正整数</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/27.png" class=""><div class="code-wrapper"><pre><code class="hljs">利用head工具可以提取头部的内容这项功能，我们可以用于很多特殊场景，譬如：1）、生成随机#位的字母加数字组合密码，举例获取16位随机密码：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/28.png" class=""><div class="code-wrapper"><pre><code class="hljs">2）、利用生成的随机字母加数字的密码，修改用户的密码，并将随机密码保存在文件中：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/29.png" class=""><div class="code-wrapper"><pre><code class="hljs">3）、简单算数</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/30.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 3.3、尾部内容查看tail工具tail工具和head工具刚好相反，查看文件或者标准输入内容的倒数行内容格式如下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/31.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用参数如下：-c #：获取指定的后面#个字符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/32.png" class=""><div class="code-wrapper"><pre><code class="hljs">-n #：获取指定的后面#行内容，如果#是负数，则表示从倒数第#行到文件结束的行内容，包含第#行，如果#为+数字，则表示从正数第#行到结尾的所有内容展示</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/33.png" class=""><div class="code-wrapper"><pre><code class="hljs">-#：同上，此时#为正整数-f：跟踪显示文件fd新追加的内容，常用语日志监控，等同于--follow=descriptor，当文件删除后再新建同名文件，将无法继续追踪文件举例：开启tail -f /var/log/c.log</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/34.png" class=""><div class="code-wrapper"><pre><code class="hljs">此时，开启一个新会话，在其中查看tail的pid，并查看此时的文件描述符为0、1、2、3、4</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/35.png" class=""><div class="code-wrapper"><pre><code class="hljs">其中0为标准输入、1是标准输出、2是标准输出错误、3是c.log的源文件描述符、4是系统基于c.log源文件复制出来的副本的描述符。此时删除c.log文件</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/36.png" class=""><div class="code-wrapper"><pre><code class="hljs">然后查看tail的pid</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/37.png" class=""><div class="code-wrapper"><pre><code class="hljs">此时pid以及fd是由变化的，因此如果在使用tail -f的时候，不要出现同步有人删除文件，否则fd的变化会导致抓取不到信息。-F：跟踪显示文件的文件名，相当于--follow=name --retry,当文件删除后再新建同名文件，可以继续追踪文件类比一下head和tail的区别</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/38.png" class=""><h1 id="4、文本文件内容处理工具"><a href="#4、文本文件内容处理工具" class="headerlink" title="4、文本文件内容处理工具"></a>4、文本文件内容处理工具</h1><div class="code-wrapper"><pre><code class="hljs"># 4.1、按列抽取文本cut工具cut工具可以按列提取文本文件内容或者STDIN数据的指定列格式如下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/39.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用参数如下：-d DELIMITER：指定分隔符的符号，默认是tab符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/41.png" class=""><div class="code-wrapper"><pre><code class="hljs">-f FILEDS：          #：第#个字段，例如：3          #，#[，#]：离散的多个字段，如：1，3，5          #-#：连续的多个字段，如1-3          也可以混合使用1-3，5</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/41.png" class=""><div class="code-wrapper"><pre><code class="hljs">-c：按照字符切割--output-delimiter=&quot;string&quot;：指定输出分隔符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/42.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 4.2、多文件文本合并paste工具    很多时候我们可能需要对文本文件进行比对或者文件内容做交汇，此时可以使用paste工具将文本预先合并类比该工具的格式：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/43.png" class=""><div class="code-wrapper"><pre><code class="hljs">默认使用效果：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/44.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用的参数如下：-d #：使用#符号用于分割合并文件的内容，默认使用tab符号</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/45.png" class=""><div class="code-wrapper"><pre><code class="hljs">-s：使用行的方式来合并对比内容</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/46.png" class=""><div class="code-wrapper"><pre><code class="hljs">还可以组合-s和-d来使用</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/47.png" class=""><h1 id="5、文本文件内容分析工具"><a href="#5、文本文件内容分析工具" class="headerlink" title="5、文本文件内容分析工具"></a>5、文本文件内容分析工具</h1><div class="code-wrapper"><pre><code class="hljs"># 5.1、文本统计数据wc工具通过wc工具，我们可以统计文本的总行数、总单词数、总字节数以及总字符数，还可以对标准输入STDIN中的数据进行统计。该工具的格式如下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/48.png" class=""><div class="code-wrapper"><pre><code class="hljs">默认使用效果：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/49.png" class=""><div class="code-wrapper"><pre><code class="hljs">常见参数如下：-l：统计行数</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/50.png" class=""><div class="code-wrapper"><pre><code class="hljs">-w：统计单词数-c：统计字节数-m：统计字符数# 5.2、文本排序sort工具当有需求：将文本进行一定的顺序进行整理后输出时，我们可以使用sort工具，它不会改变原有文件格式如下：</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/51.png" class=""><div class="code-wrapper"><pre><code class="hljs">常用参数如下：-r：执行内容反向顺序输出</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/52.png" class=""><div class="code-wrapper"><pre><code class="hljs">-R：随机排序输出-n：按照数字大小进行排序输出</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/53.png" class=""><div class="code-wrapper"><pre><code class="hljs">-h：按照易于人类可读的方式排序-u：unique，用于去重</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/54.png" class=""><div class="code-wrapper"><pre><code class="hljs">-t #：使用#字符来做分隔符</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/55.png" class=""><div class="code-wrapper"><pre><code class="hljs">-k #：使用第#列的内容来整理排序</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/56.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 5.3、文本去重uniq工具    uniq工具常跟sort工具配合使用</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/57.png" class=""><div class="code-wrapper"><pre><code class="hljs">如上图，去重是将连续相同的字符或单词进行去重# 5.4、文本比对diff工具通过diff工具来比较两个文件之间的区别这里就只推荐一个选项：-u：输出统一的（unified）diff格式文件。</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/58.png" class=""><div class="code-wrapper"><pre><code class="hljs">通过diff -u我们还可以将不同的两个文件差异生成一个.patch补丁文件，当两个文件中的任意一个被误删除后都可以通过.patch补丁文件和另一个文件恢复。用于恢复的文件内容将会生成至.orig文件中首先安装patch工具</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/59.png" class=""><div class="code-wrapper"><pre><code class="hljs">开始生成补丁文件</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/60.png" class=""><div class="code-wrapper"><pre><code class="hljs">通过补丁文件进行还原</code></pre></div><img src="/2022/08/10/%E6%96%87%E6%9C%AC%E6%9F%A5%E7%9C%8B%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/61.png" class=""><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本编辑器</title>
    <link href="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h1><p>  正如linux哲学思想所说，一切皆文件。对于linux，无论硬件、内核还是网络的存在，都是以文件的方式。因此我们对于linux系统的操作，必然要跟文件打交道。<br>  其实在日常生活中，我们对于文件的操作就已经很常见了（无论是在MACOS还是windows），譬如使用记事本或者notepad++创建、编辑一个txt文本等。<br>  那么在linux中，我们有哪些文本编辑器呢？<br>  按照文本编辑类型分类：<br>  1、全屏编辑器：nano(字符工具)、gedit（图形化工具）、vi、vim<br>  2、行编辑器：sed<br>  相比较而言，nano工具在使用的时候，提示内容较多，入门较为容易掌握，这里不再记录，就简单总结一下功能非常强大的VIM编辑器</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>  vim：Visual editor iMproved，功能如名，属于vi相同的工具类型，只是功能上有所增加。不过该编辑器并非必须工具，因此不少linux系统下会发现无该工具，需要进行安装</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/1.png" class=""><p>  官网：<a href="http://www.vim.org/">www.vim.org</a><br>  推荐学习网站：<a href="http://www.w3cschool.cn/vim/">www.w3cschool.cn/vim/</a></p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/3.png" class=""><p>  按照惯例，学习工具或者命令的时候，先学习一下格式</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/2.png" class=""><p>  常用的参数：<br>  1）、 +#：打开文件后，让光标直接落于第#行的行首，如果不带#，+默认为行尾<br>  （为确保显示行号是#行，我们在登录用户的家目录，创建.vimrc，文件，设置set nu用于显示行号）</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/4.png" class=""><p>  用. .vimrc重新加载一下配置文件后，测试： vim +7 /data/etc/fstab，结果如下：</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/5.png" class=""><p>  不带#号，如下：</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/6.png" class=""><p>  2）、 +/pattern：让光标落位于第一个被/pattern匹配的行的行首，举例：</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/7.png" class=""><p>  3）、 -d file1 file2 … 用于对比多个文件，类似于vimdiff，举例如下：</p><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/8.png" class=""><p>  4）、 -m file 以只读方式打开文件。<br>  特别说明：<br>  1#：如果vim命令后的文件存在，则文件被打开并显示对应的内容<br>  2#：如果vim命令后的文件不存在，则创建一个同名文件</p><h1 id="VIM模式"><a href="#VIM模式" class="headerlink" title="VIM模式"></a>VIM模式</h1><div class="code-wrapper"><pre><code class="hljs">通过上一节，我们了解了VIM工具的格式以及一些常用的参数。那么当我们开始对文档操作的时候，就会进入到文本的操作模式切换。在VIM中共有四种模式：1）、正常或命令模式（normal-mode）：默认模式，可以实现光标的移动，文本的删除、替换、复制等2）、插入模式(Insert-mode)：用于编辑、修改文本3）、命令末行或扩展命令模式（command-mode）：文本保存、查询、扩展调用（set ai、设置高亮等）退出等4）、可视模式（visual-mode）：相当于高亮选取文本后的普通模式</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/9.png" class=""><h1 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h1><div class="code-wrapper"><pre><code class="hljs">1）、命令模式切换插入模式：在命令模式下按下如下按键i：insert，按下后在光标所在处可以进行输入</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/10.png" class=""><div class="code-wrapper"><pre><code class="hljs">I：可以在当前光标所在行的行首进行输入</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/11.png" class=""><div class="code-wrapper"><pre><code class="hljs">a：append，可以在光标所在处的后面进行输入（输入前让光标在第14行/dev/mapper/rl-home的字母l处）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/12.png" class=""><div class="code-wrapper"><pre><code class="hljs">A：可以在当前光标所在行的行尾进行输入（输入前让光标在第14行/dev/mapper/rl-home的字母l处）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/13.png" class=""><div class="code-wrapper"><pre><code class="hljs">o：在当前光标所在行的下方开一个新行，可用于输入（同上）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/14.png" class=""><div class="code-wrapper"><pre><code class="hljs">O：在当前光标所在行的上方开一个新行（同上）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/15.png" class=""><div class="code-wrapper"><pre><code class="hljs">2）、插入模式切换命令模式：按下ESC键3）、命令模式切换扩展命令模式：按下冒号：键4）、扩展命令模式切换命令模式：按下ESC键后再按下ENTER键，或连续按下两次ESC键</code></pre></div><h1 id="各模式功能简介"><a href="#各模式功能简介" class="headerlink" title="各模式功能简介"></a>各模式功能简介</h1><div class="code-wrapper"><pre><code class="hljs">完成模式切换的方式后，这对这几种模式各自能够实现的功能进行简介# 1、命令模式（normal-mode）命令模式下，我们可以针对文档信息进行查看。此时如果发现需要修改，则要进入insert模式。但是当我们仅需要修改部分很少的内容，模式切换就显得比较麻烦。其实，命令模式下，有着很多的的快捷键功能供我们使用：# 1.1、退出VIM模式快捷键：       ZZ：保存修改并推出       ZQ：退出不保存# 1.2、光标移动快捷键：       #h：向左移动#个字符       #j：向下移动#个字符       #k：向上移动#个字符       #l：向右移动#个字符       #w：第#个单词的词首（除了空格外的标点也算一个词，举例：光标默认在vimrc文件第5行的行首set，输入2w）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/16.png" class=""><div class="code-wrapper"><pre><code class="hljs">       #e：当前或下#个单词后的单词词尾（如果光标在当前单词的非词尾位置，则#的计数算本单词。如果在当前单词的词尾，则从下一个单词计数，光标同上，输入2e）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/17.png" class=""><div class="code-wrapper"><pre><code class="hljs">       #b：当前或下#个单词后的单词词首（如果光标在当前单词的非词首位置，则#的计数算本单词。如果在当前单词的词首，则从前一个单词计数，光标默认在vimrc文件       第5行的eol的字符o上，输入3b）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/18.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.3、当前页跳转：快捷键：      H：直接跳转页首（该页首指当前屏幕显示页面的页首，而非整体内容的页面中间）      M：跳转页面中间（该页面中间指当前屏幕显示页面的中间，而非整体内容的页面中间），举例：光标目前在vimrc文件的第1行的if单词的i字符下，直接输入M，后光标      自动跳转至第21行的行首autocmd的a字符处。（看此时屏幕，共计42行）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/19.png" class=""><div class="code-wrapper"><pre><code class="hljs">      L：跳转至当前屏幕页面的页底      zt：将光标所在行跳转至屏幕顶端显示，举例：光标目前在vimrc文件的第36行的set nocsverb的s字符下，直接输入zt跳转，输入前界面：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/20.png" class=""><div class="code-wrapper"><pre><code class="hljs">      输入zt后</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/21.png" class=""><div class="code-wrapper"><pre><code class="hljs">      zz：将光标所在行跳转至屏幕中间显示</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/22.png" class=""><div class="code-wrapper"><pre><code class="hljs">      zb：将光标所在行跳转至屏幕低端显示，举例：光标目前在vimrc文件的第45行的endif的e字符下，直接输入zb跳转      输入zb前</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/23.png" class=""><div class="code-wrapper"><pre><code class="hljs">      输入zb后</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/24.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.4、行首行尾跳转快捷键：       ^：跳转至行首的第一个非空白字符，举例：光标目前在vimrc文件的第21行的BufReadPost的B字符下</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/25.png" class=""><div class="code-wrapper"><pre><code class="hljs">       0：跳转至行首，举例如上</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/26.png" class=""><div class="code-wrapper"><pre><code class="hljs">       $：跳转至行尾，举例如上</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/27.png" class="">    <div class="code-wrapper"><pre><code class="hljs"># 1.5、行间跳转快捷键：       #G：跳转至第#行，举例：光标目前在vimrc文件的第1行，键入7G</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/28.png" class=""><div class="code-wrapper"><pre><code class="hljs">       G：跳转至最后一行，举例如上，当前在第7行</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/29.png" class=""><div class="code-wrapper"><pre><code class="hljs">       gg：跳转至第一行，如同1G，举例如上</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/30.png" class="">    <div class="code-wrapper"><pre><code class="hljs"># 1.6、句间、段间跳转快捷键：       ）：跳转下一句，举例：（如果为if，else等语句，完整为一句，当前光标在vimrc文件的第1行，键入）后跳转至第4行）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/31.png" class=""><div class="code-wrapper"><pre><code class="hljs">      （ ：跳转上一句       &#125; ：跳转下一段，举例：目前光标在上一次操作后的第4行，键入&#125;后跳转空白的第13行（注：空白行间隔的内容为一段）</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/32.png" class=""><div class="code-wrapper"><pre><code class="hljs">       &#123; ：跳转上一段           # 1.7、翻屏跳转快捷键：       Ctrl+f：向文件尾部跳转一屏；       Ctrl+b：向文件首部跳转一屏；# 1.8、字符操作快捷键：       #x：剪切光标处开始的#个字符，举例：光标目前在vimrc文件的第14行，when的w字符处，此时键入3w，可以看到此时when单词仅剩n字符存在：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/33.png" class=""><div class="code-wrapper"><pre><code class="hljs">       xp：交换光标所处的字符预期临界字符的位置。举例：还原文件后，位置依然如上，此时键入xp，可以看到when变为hwen:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/34.png" class="">          <div class="code-wrapper"><pre><code class="hljs">       ~：转换大小写，举例：如上位置，还原后，键入~，可以看到when变为When:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/35.png" class=""><div class="code-wrapper"><pre><code class="hljs">       r：替换光标处的字符为键入r键后的字符，举例：如上位置还原后，键入r，随后键入t，此时when变为then:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/36.png" class=""><div class="code-wrapper"><pre><code class="hljs">       R：切换至REPLACE模式，按ESC键回到命令模式，举例：如上位置还原后，键入R，随后输入haha，此时when变为haha，按键ESC后退出REPLACE模式：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/37.png" class=""><div class="code-wrapper"><pre><code class="hljs">       d：删除命令，结合光标跳转字符，实现范围删除          d$：从光标字符删除到行尾（包含该光标所在字符），等同D，举例：还原位置和内容后，键入d$，此时发现包含when字符均删除：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/38.png" class="">     <div class="code-wrapper"><pre><code class="hljs">          d^：从光标字符前删除至非空行首，举例：还原位置和内容后，键入d^，此时发现包含when之前至行首的字符均删除：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/39.png" class=""><div class="code-wrapper"><pre><code class="hljs">          d0：从光标字符前删除至行首，举例：还原位置和内容后，键入d0，此时发现包含when之前至行首的字符均删除：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/40.png" class=""><div class="code-wrapper"><pre><code class="hljs">          dd：删除光标所在行，举例：还原位置和内容后，键入dd，此时发现包含when所在行字符均删除：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/41.png" class=""><div class="code-wrapper"><pre><code class="hljs">          #dd：删除从光标开始的#个行，举例：还原位置和内容后，键入3dd，此时发现包含when所在14-16行字符均删除：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/42.png" class=""><div class="code-wrapper"><pre><code class="hljs">       p（小写）：粘贴命令，如果缓冲区缓存的是整行的内容，粘贴内容将会在当前光标所在行的下方，否则，内容将会粘贴到当前光标所在位置的后面；       P（大写）：粘贴命令，如果缓冲区缓存的是整行的内容，则粘贴内容将会出现在当前光标所在行的上方，否则，内容将会被粘贴到当前光标所谓位置的前面；       y：复制命令，同d的组合类型，可以结合跳转光标，举例          y$：从光标所在字符，复制到行尾（包含光标所在字符）。举例：如上还原位置和内容后，键入y$，随后键入P粘贴下来，可查看到复制内容：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/43.png" class=""><div class="code-wrapper"><pre><code class="hljs">          y^：从光标所在字符，复制到行首非空字符（不包含光标所在字符）。举例：此时光标位置在vimrc文件的第18行，limit的l字符处，此时键入y^，随后键入p：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/44.png" class=""><div class="code-wrapper"><pre><code class="hljs">          y0：从光标所在字符前，复制到行首，包含行首为空的字符。举例：如上位置，还原上一步操作后，键入y0，随后键入p:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/45.png" class=""><div class="code-wrapper"><pre><code class="hljs">          yy：从光标所在行，复制整行内容。举例：如上位置，还原上一步操作后，键入yy，随后键入p:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/46.png" class=""><div class="code-wrapper"><pre><code class="hljs">          #yy：从光标所在行，复制#行的内容。举例：如上位置，还原上一步操作后，键入3yy，随后键入p，可以看到从18行至20行的三行内容 被复制:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/47.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.9、修改命令快捷键：       注：使用修改命令c后，内容被删除后直接切换为insert模式。       c$：从光标所在字符删除至行尾（包含光标所在字符），随后进入insert模式。举例：如上设置，光标位置在vimrc文件的第18行，limit的l字符处，此时键入c$：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/48.png" class=""><div class="code-wrapper"><pre><code class="hljs">       c^：从光标所在字符删除至行首非空字符处，随后进入insert模式。举例：如上设置，光标位置在vimrc文件的第18行，limit的l字符处，此时键入c^：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/49.png" class=""><div class="code-wrapper"><pre><code class="hljs">       c0：从光标所在字符删除至行首，随后进入insert模式。举例：如上设置，光标位置在vimrc文件的第18行，limit的l字符处，此时键入c0：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/50.png" class=""><div class="code-wrapper"><pre><code class="hljs">       cc：删除当前光标所在行，举例：光标位置还原，键入cc：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/51.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 命令模式下文本操作总结</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/52.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.10、查找命令快捷键：       /pattern：从当前光标所在位置想文件首部查找。</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/53.png" class=""><div class="code-wrapper"><pre><code class="hljs">       ？pattern：从当前光标所在位置向文件首部查找。</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/54.png" class=""><div class="code-wrapper"><pre><code class="hljs">       n：与命令同方向，查找下一个或上一个匹配pattern的文件位置。</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/55.png" class=""><div class="code-wrapper"><pre><code class="hljs">       N：与命令反方向，查找下一个或上一个匹配pattern的文件位置。</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/56.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 1.11、撤销命令快捷键：       u：撤销最近的更改（undo），类似Windows文本文件中的Ctrl+z。       #u：撤销之前#次更改。       U：撤销光标落在本行后，所有对于此行的更改操作。       .：重复前一个操作。       #.：重复前一个操作#次。# 2、命令末行或扩展命令模式（command-mode）扩展命令模式，如名称所言，可以为我们提供标准命令以外更多的帮助，这些具体的帮助，将会随后进行简单的展开。通过键入冒号：我们可以切换进入扩展命令模式，此时提示符会在屏幕左下角显示：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/57.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 2.1、扩展命令中的基础命令w：写入文件wq：写入并退出x（小写）：写入并退出注：wq与x都有写入文件并退出的功能，区别在于，wq退出的时候，无论之前对文件是否有过修改，文件的修改ctime时间都会更新为退出时的时间，而x仅当文件内容确实被修改后，退出才会更改ctime。举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/58.png" class=""><div class="code-wrapper"><pre><code class="hljs">X（大写）：文件加密q（小写）：退出q!：不写入文件，强制退出，之前的修改都不生效r file1：将file1文件内的内容读取，并写入到当前文件的光标之后，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/59.png" class=""><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/60.png" class=""><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/61.png" class=""><div class="code-wrapper"><pre><code class="hljs">w file2：将当前文件的内容写入到另一个文件，举例：通过vim编辑fstab文件的时候，想起来需要备份，使用w，写入到fstab.bak文件（此时不存在fstab.bak文件）：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/62.png" class=""><div class="code-wrapper"><pre><code class="hljs">!command：执行命令，一般可在修改文件时想要查看某些内容，或是某些命令的执行结果，可通过此方式，执行完成命令后，回车即可退回编辑，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/63.png" class=""><div class="code-wrapper"><pre><code class="hljs">r!command：读入命令执行后的内容。举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/64.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 2.2、地址界定格式：     :start_pos,end_pos CMD     如上为起始界定，终止界定，CMD命令     # 2.2.1、地址界定格式@：第@行，举例：当前光标在vimrc文件的第一行，输入61后，光标直接跳转至61行：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/65.png" class=""><div class="code-wrapper"><pre><code class="hljs">@，&amp;：从左侧@行起始，到右侧&amp;行结束，直接使用没有太大意义，主要用于圈定范围，与范围后添加的CMD命令共同执行@，+#：从第@行开始，到右侧加上加上#的行。如2，+4，表示第2到第6行.：代表当前行$：代表最后一行.，$-1：从当前行到倒数第二行%：表示全文，类似1,$的效果/pattern/：从当前行向下查找，找到匹配pattern的第一行；/part1/，/part2/：从第一次匹配到part1的行开始，直到第一次匹配到part2的行结束；@，/pattern/：从指定的@行开始，直到第一次匹配pattern的行结束；/pattern/,$：从第一个匹配/pattern/的行开始，知道文件最后的所有行。      # 2.2.2、地址界定后的CMD命令d：删除命令，结合地址界定范围，可以实现范围删除，举例：2，10 d:</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/66.png" class=""><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/67.png" class=""><div class="code-wrapper"><pre><code class="hljs">y：复制命令w file2：将范围内的行，写入指定的file2文件中r file1：在指定位置插入指定文件中的所有内容# 2.3、查找替换格式：     s/查找的内容/要替换成的内容/修饰符说明：要查找的内容可以使用正则表达式模式；      要替换成的内容不能使用模式，但可以使用\1，\2等后向引用符号。还可以使用“&amp;”引用前面查找时查找到的整个内容；      修饰符：i：忽略大小写；              g：全局替换，默认不带修饰符g的时候，每一次仅替换查找到的第一个内容；              gc：全局替换，但是每次替换的时候都会询问，交互。      查找替换中的分隔符除了/还可以使用@,#符号来代替，但需要保证前后一致。举例：ifcfg文件中的no都替换为yes：1,14 s@no@yes@g，结果如下：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/68.png" class="">    <div class="code-wrapper"><pre><code class="hljs"># 2.4、定制vim特性一切皆文件，扩展命令的配置只对当前vim进程生效，想要长久生效，必要写入文件中存放：/etc/vimrc：该文件影响全局~.vimrc：家目录下的该文件仅影响该用户，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/69.png" class="">    <div class="code-wrapper"><pre><code class="hljs">      # 2.4.1、设置行号显示      启用：set number，缩写 set nu      取消启用：set nonumber，缩写 set nonu      # 2.4.2、忽略字符大小写      启用：set ignorecase，缩写 set ic      取消启用：set noignorecase，缩写 set noic      # 2.4.3、自动缩进      启用：set autoindent，缩写 set ai      取消启用：set noautoindent，缩写 set noai      # 2.4.4、复制保留格式      启用：set paste      取消启用：set nopaste      # 2.4.5、高亮搜索      启用：set hlsearch      取消启用：set nohlsearch，缩写 set nohl      # 2.4.6、显示TAB ^I和换行符 $显示      启用：set list      取消启用：set nolist      # 2.4.7、语法高亮      启用：syntax on      取消启用：syntax off      # 2.4.8、光标所在行显示标识线      启用：set cursorline，缩写 set cul      取消启用：set nocursorline      # 2.4.9、了解更多      help option-list      set all</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/70.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 3、可视模式（visual-mode）可视模式下，在页面底部有&quot;----VISUAL----&quot;的提示，在该模式下，可以选取的文字会凸显，可被删除、复制、过滤搜索等允许选取的范围：1）、键入v（小写）进入可视模式：面向字符高亮以及操作2）、键入V（大写）进入可视模式：面向行高亮以及操作3）、ctrl+v：面向块高亮以及操作举例：在文件的所有行首插入#：步骤：     1）、光标移至第一行行首     2）、键入Ctrl+v，进入可视模式</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/71.png" class="">         <div class="code-wrapper"><pre><code class="hljs">     3）、向下移动光标，选中每一行的行首第一个字符</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/72.png" class=""><div class="code-wrapper"><pre><code class="hljs">     4）、选中后输入大写字母I，进入插入模式</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/73.png" class=""><div class="code-wrapper"><pre><code class="hljs">     5）、键入#</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/74.png" class=""><div class="code-wrapper"><pre><code class="hljs">     6）、按键ESC。</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/75.png" class=""><div class="code-wrapper"><pre><code class="hljs"># 4、插入模式(Insert-mode)i：insert，按下后在光标所在处可以进行输入I：可以在当前光标所在行的行首进行输入a：append，可以在光标所在处的后面进行输入（输入前让光标在第14行/dev/mapper/rl-home的字母l处）A：可以在当前光标所在行的行尾进行输入（输入前让光标在第14行/dev/mapper/rl-home的字母l处）o：在当前光标所在行的下方开一个新行，可用于输入（同上）O：在当前光标所在行的上方开一个新行（同上）# 多文件模式格式：vim file1 file2 file3 ....：next 跳转下一个文件：prev 跳转上一个文件：first 跳转第一个文件：last 跳转对后一个文件：wall 保存编辑打开的所有文件：qall 退出不写入所有文件：wqall 保存写入并退出所有文件# 多窗口模式1）、多文件多窗口格式：vim -o|-O file1 file2-o（小写）：水平分割，即两个文件一上一下，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/76.png" class=""><div class="code-wrapper"><pre><code class="hljs">-O（大写）：垂直分割，即连个文件一左一右，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/77.png" class=""><div class="code-wrapper"><pre><code class="hljs">窗口间切换：先键入CTRL+w，然后使用键盘上的上下左右按键，将光标挪至对应文件窗口。（如果为水平分割，则窗口切换仅用上下，垂直分割，则只用左右）2）、单文件分屏格式：vim file1后键入快捷键；ctrl+w,s：键入ctrl+w后快速键入s，此时为单文件的水平分割，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/78.png" class=""><div class="code-wrapper"><pre><code class="hljs">ctrl+w,v：键入ctrl+w后快速键入v，此时为单文件的垂直分割，举例：</code></pre></div><img src="/2022/08/08/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/79.png" class=""><div class="code-wrapper"><pre><code class="hljs">ctrl+w,q：键入ctrl+w后快速键入q，取消相邻的窗口ctrl+w,o：键入ctrl+w后快速键入o，取消全部窗口</code></pre></div><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件以及用户权限管理</title>
    <link href="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1、linux的用户"><a href="#1、linux的用户" class="headerlink" title="1、linux的用户"></a>1、linux的用户</h1><p>  在linux系统中，每个用户登录后，系统都会分配对应的令牌token，包括：用户标识以及组成员的信息，完成AAA认证；<br>  AAA：<br>  Authentication：认证，用于验证用户的身份<br>  Authorization：授权，针对不同的用户给与不同的权限<br>  Accounting|Audition：审计</p><h1 id="1-1、用户"><a href="#1-1、用户" class="headerlink" title="1.1、用户"></a>1.1、用户</h1><p>  每个用户都是通过User ID，即用户ID来唯一标识的，其中：<br>  管理员：root，ID为0<br>  普通用户：1-60000自动分配：<br>      系统用户：1-999，对守护进程获取资源进行权限分配<br>      登录用户：1000+，分配给用户用于交互式登录使用<br>      举例：</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/1.PNG" class=""><h1 id="1-2、用户组"><a href="#1-2、用户组" class="headerlink" title="1.2、用户组"></a>1.2、用户组</h1><p>  对于想要拥有相同权限的一个或多个用户，放置于一个用户组，对该用户组设置相同权限来实现。<br>  于用户一致，用户组通过Group ID（GID）来识别<br>  管理员组：root GID为0<br>  普通组：<br>      系统组：1-999， 对守护进程获取资源进行权限分配<br>      普通用户组：1000+，给用户使用<br>      举例：</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/2.PNG" class=""><h1 id="1-3、用户与用户组之间的关系"><a href="#1-3、用户与用户组之间的关系" class="headerlink" title="1.3、用户与用户组之间的关系"></a>1.3、用户与用户组之间的关系</h1><p>  1）、用户的主要组(primary group)：用户必须属于一个且只有一个主组，默认创建用户时会自动创建和用户名同名的组，做为用户的主要组，<br>  由于此组中只有一个用户，又称为私有组。<br>  2）、用户的附加组(supplementary group)：一个用户可以属于零个或多个辅助组，附属组</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/3.PNG" class=""><h1 id="1-4、安全上下文"><a href="#1-4、安全上下文" class="headerlink" title="1.4、安全上下文"></a>1.4、安全上下文</h1><p>  Linux安全上下文Context：运行中的程序，即进程 (process)，以进程发起者的身份运行，进程所能够访问资源的权限取决于进程的运行者的身份。<br>  比如：分别以root 和hp 的身份运行/bin/cat  /etc/shadow ，得到的结果是不同的，资源能否能被访问，是由运行者的身份决定，非程序本身</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/4.PNG" class=""><h1 id="2、用户和用户组的配置文件"><a href="#2、用户和用户组的配置文件" class="headerlink" title="2、用户和用户组的配置文件"></a>2、用户和用户组的配置文件</h1><h1 id="2-1、用户和用户组的主要配置文件"><a href="#2-1、用户和用户组的主要配置文件" class="headerlink" title="2.1、用户和用户组的主要配置文件"></a>2.1、用户和用户组的主要配置文件</h1><p>  /etc/passwd：用户及其属性信息(名称、UID、主组ID等）<br>  /etc/shadow：用户密码及其相关属性<br>  /etc/group：组及其属性信息<br>  /etc/gshadow：组密码及其相关属性</p><h1 id="2-2、passwd文件格式"><a href="#2-2、passwd文件格式" class="headerlink" title="2.2、passwd文件格式"></a>2.2、passwd文件格式</h1><p>  login name：登录用名（hp）<br>  passwd：密码  (x)<br>  UID：用户身份编号 (1000)<br>  GID：登录默认所在组编号  (1000)<br>  GECOS：用户全名或注释<br>  home directory：用户主目录 (/home/hp)<br>  shell：用户默认使用shell (/bin/bash)</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/5.PNG" class=""><p>  如上7个属性通过“：”进行隔离。其中密码使用X代替，真实的密码存储在/etc/shadow文件中</p><h1 id="2-3、shadow文件格式"><a href="#2-3、shadow文件格式" class="headerlink" title="2.3、shadow文件格式"></a>2.3、shadow文件格式</h1><p>  登录用名<br>  用户密码:一般用sha512加密<br>  从1970年1月1日起到密码最近一次被更改的时间<br>  密码再过几天可以被变更（0表示随时可被变更）<br>  密码再过几天必须被变更（99999表示永不过期）<br>  密码过期前几天系统提醒用户（默认为一周）<br>  密码过期几天后帐号会被锁定<br>  从1970年1月1日算起，多少天后帐号失效<br>  保留位</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/6.PNG" class=""><p>  如上9个属性通过“：”进行隔离。其中第二位的密码由三个$符号隔开，第一个数字6即代表使用的是sha512加密，后面被$隔开的分别是随机数和密码。</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/7.PNG" class=""><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/8.PNG" class=""><p>  生成12位随机密码：tr  -dc ‘[:alnum:]’ &lt; /dev/urandom | head -c 12</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/9.PNG" class=""><h1 id="2-4、group文件格式"><a href="#2-4、group文件格式" class="headerlink" title="2.4、group文件格式"></a>2.4、group文件格式</h1><p>  群组名称：就是群组名称<br>  群组密码：通常不需要设定，密码是被记录在 /etc/gshadow<br>  GID：就是群组的 ID<br>  以当前组为附加组的用户列表(分隔符为逗号)</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/10.PNG" class=""><h1 id="2-5、gshadow文件格式"><a href="#2-5、gshadow文件格式" class="headerlink" title="2.5、gshadow文件格式"></a>2.5、gshadow文件格式</h1><p>  群组名称：就是群的名称<br>  群组密码：<br>  组管理员列表：组管理员的列表，更改组密码和成员<br>  以当前组为附加组的用户列表：多个用户间用逗号分隔</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/11.PNG" class=""><h1 id="2-6、文件操作"><a href="#2-6、文件操作" class="headerlink" title="2.6、文件操作"></a>2.6、文件操作</h1><p>  vipw和vigr：<br>  vipw命令用于修改shadow,vigr命令用于修改group<br>  pwck和grpck：<br>  pwck用于校验/etc/passwd以及/etc/shadow两个文件的完整性，使用该命令后，跟上echo $?查看返回值，即可知道文件是否完整</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/12.PNG" class=""><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/13.PNG" class=""><p>  grpck命令用于验证组文件/etc/group和/etc/shadow的完整性</p><h1 id="3、用户和组管理命令"><a href="#3、用户和组管理命令" class="headerlink" title="3、用户和组管理命令"></a>3、用户和组管理命令</h1><p>  用户管理命令：<br>  useradd、usermod、userdel<br>  组账号管理命令：<br>  groupadd、groupmod、groupdel</p><h1 id="3-1、用户创建"><a href="#3-1、用户创建" class="headerlink" title="3.1、用户创建"></a>3.1、用户创建</h1><p>  useradd 命令可以创建新的Linux用户，格式：<br>  useradd [options] LOGIN<br>  常见的选项：<br>  -u  UID<br>  -o  配合-u 选项，不检查UID的唯一性<br>  -g  GID  指明用户所属基本组，可为组名，也可以GID<br>  -c  “COMMENT“    用户的注释信息<br>  -d  HOME_DIR 以指定的路径(不存在)为家目录<br>  -s  SHELL    指明用户的默认shell程序，可用列表在/etc/shells文件中<br>  -G  GROUP1[,GROUP2,…]  为用户指明附加组，组须事先存在<br>  -N  不创建私用组做主组，使用users组做主组<br>  -r  创建系统用户ID&lt;1000<br>  -m  创建家目录，用于系统用户<br>  -M  不创建家目录，用于非系统用户<br>  -p  指定加密的密码<br>  useradd 命令默认值设定由/etc/default/useradd定义</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/14.PNG" class=""><p>  其中：<br>  HOME=/homeINACTIVE=-1    #对应/etc/shadow文件第7列，即用户密码过期后的帐号锁定的宽限期,-1表示不锁定<br>  EXPIRE=        #对应/etc/shadow文件第8列，即用户帐号的有效期<br>  SKEL=/etc/skel  #用于生成新建用户家目录的模版文件</p><h1 id="3-2、用户属性修改"><a href="#3-2、用户属性修改" class="headerlink" title="3.2、用户属性修改"></a>3.2、用户属性修改</h1><p>  usermod 命令可以修改用户属性，格式：<br>  usermod [OPTION] login<br>  常见选项：<br>  -u UID: 新UID<br>  -g GID: 新主组<br>  -G GROUP1[,GROUP2,…[,GROUPN]]]：新附加组，原来的附加组将会被覆盖；若保留原有，则要同时使用-a选项<br>  -s SHELL：新的默认SHELL<br>  -c ‘COMMENT’：新的注释信息<br>  -d HOME: 新家目录不会自动创建；若要创建新家目录并移动原家数据，同时使用-m选项<br>  -l login_name: 新的名字<br>  -L: lock指定用户,在/etc/shadow 密码栏的增加 !<br>  -U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉<br>  -e YYYY-MM-DD: 指明用户账号过期日期<br>  -f INACTIVE: 设定非活动期限，即宽限期</p><h1 id="3-3、删除用户"><a href="#3-3、删除用户" class="headerlink" title="3.3、删除用户"></a>3.3、删除用户</h1><p>  userdel 可删除Linux 用户，格式：<br>  userdel [OPTION]… Login<br>  常见选项：<br>  -f, –force     强制<br>  -r, –remove    删除用户家目录和邮箱<br>  建议删除的时候带上-r属性，删除的干净</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/15.PNG" class=""><h1 id="3-4、查看用户相关ID信息"><a href="#3-4、查看用户相关ID信息" class="headerlink" title="3.4、查看用户相关ID信息"></a>3.4、查看用户相关ID信息</h1><p>  id 命令可以查看用户的UID，GID等信息，格式：<br>  id [OPTION]… [USER]<br>  常见选项：<br>  -u: 显示UID<br>  -g: 显示GID<br>  -G: 显示用户所属的组的ID<br>  -n: 显示名称，需配合ugG使用</p><h1 id="3-5、切换用户或以其他用户身份执行命令"><a href="#3-5、切换用户或以其他用户身份执行命令" class="headerlink" title="3.5、切换用户或以其他用户身份执行命令"></a>3.5、切换用户或以其他用户身份执行命令</h1><p>  su:  即 switch user，命令可以切换用户身份，并且以指定用户的身份执行命令，格式：<br>  su [options…] [-] [user [args…]]<br>  常见选项：<br>  -l  –login   su -l UserName    相当于 su - UserName<br>  -c, –command <command>         pass a single command to the shell with -c<br>  切换用户的方式：<br>    su UserName：非登录式切换，即不会读取目标用户的配置文件，不改变当前工作目录，即不完全切换<br>    su - UserName：登录式切换，会读取目标用户的配置文件，切换至自已的家目录，即完全切换<br>  注：root su至其他用户无须密码；非root用户切换时需要密码。su 切换新用户后，使用 exit 退回至旧的用户身份，<br>  而不要再用 su 切换至旧用户，否则会生成很多的bash子进程，环境可能会混乱。</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/16.PNG" class=""><h1 id="3-6、设置密码"><a href="#3-6、设置密码" class="headerlink" title="3.6、设置密码"></a>3.6、设置密码</h1><p>  passwd 可以修改用户密码，格式：<br>  passwd [OPTIONS] UserName<br>  常用选项：<br>  -d：删除指定用户密码<br>  -l：锁定指定用户<br>  -u：解锁指定用户<br>  -e：强制用户下次登录修改密码<br>  -f：强制操作<br>  -n mindays：指定最短使用期限<br>  -x maxdays：最大使用期限<br>  -w warndays：提前多少天开始警告<br>  -i inactivedays：非活动期限<br>  –stdin：从标准输入接收用户密码,Ubuntu无此选项</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/17.png" class=""><h1 id="3-7、修改用户密码策略"><a href="#3-7、修改用户密码策略" class="headerlink" title="3.7、修改用户密码策略"></a>3.7、修改用户密码策略</h1><p>  chage 可以修改用户密码策略，格式：<br>  chage [OPTION]… LOGIN<br>  常见选项：<br>  -d  LAST_DAY                   #更改密码的时间<br>  -m –mindays MIN_DAYS<br>  -M –maxdays MAX_DAYS<br>  -W –warndays WARN_DAYS<br>  -I –inactive INACTIVE          #密码过期后的宽限期<br>  -E –expiredate EXPIRE_DATE     #用户的有效期<br>  -l  显示密码策略</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/18.PNG" class=""><h1 id="3-8、创建组"><a href="#3-8、创建组" class="headerlink" title="3.8、创建组"></a>3.8、创建组</h1><p>  groupadd实现创建组，格式：<br>  groupadd [OPTION]… group_name<br>  常见选项：<br>  -g GID  指明GID号；[GID_MIN, GID_MAX]<br>  -r  创建系统组，ID&lt;1000</p><h1 id="3-9、修改组"><a href="#3-9、修改组" class="headerlink" title="3.9、修改组"></a>3.9、修改组</h1><p>   groupmod  组属性修改，格式：<br>   groupmod [OPTION]… group<br>   常见选项：<br>   -n group_name: 新名字<br>   -g GID: 新的GID</p><h1 id="3-10、组删除"><a href="#3-10、组删除" class="headerlink" title="3.10、组删除"></a>3.10、组删除</h1><p>  groupdel 可以删除组，格式：<br>  groupdel [options] GROUP<br>  常见选项：<br>  -f, –force 强制删除，即使是用户的主组也强制删除组,但会导致无主组的用户不可用无法登录</p><h1 id="3-11、更改组成员和密码"><a href="#3-11、更改组成员和密码" class="headerlink" title="3.11、更改组成员和密码"></a>3.11、更改组成员和密码</h1><p>  gpasswd命令，可以更改组密码，也可以修改附加组的成员关系，格式：<br>  gpasswd [OPTION] GROUP<br>  常见选项：<br>  -a user  将user添加至指定组中<br>  -d user  从指定附加组中移除用户user<br>  -A user1,user2,…  设置有管理权限的用户列表</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/19.PNG" class=""><h1 id="3-12、更改和查看组成员"><a href="#3-12、更改和查看组成员" class="headerlink" title="3.12、更改和查看组成员"></a>3.12、更改和查看组成员</h1><p>  groupmems 可以管理附加组的成员关系，格式：<br>  groupmems [options] [action]<br>  常见选项：<br>   -g, –group groupname       #更改为指定组 (只有root)<br>   -a, –add username          #指定用户加入组<br>   -d, –delete username       #从组中删除用户<br>   -p, –purge                 #从组中清除所有成员<br>   -l,  –list                 #显示组成员列表<br>  groups 可查看用户组关系，格式：<br>  groups [OPTION].[USERNAME]… </p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/20.PNG" class=""><h1 id="4、文件权限管理"><a href="#4、文件权限管理" class="headerlink" title="4、文件权限管理"></a>4、文件权限管理</h1><p>  程序访问文件时的权限，取决于此程序的发起者；<br>  进程的发起者，同文件的属主：则应用文件属主权限；<br>  进程的发起者，属于文件属组；则应用文件属组权限；<br>  应用文件“其它”权限</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/21.PNG" class=""><h1 id="4-1、文件所有者和属组属性操作"><a href="#4-1、文件所有者和属组属性操作" class="headerlink" title="4.1、文件所有者和属组属性操作"></a>4.1、文件所有者和属组属性操作</h1><div class="code-wrapper"><pre><code class="hljs"># 4.1.1、设置文件的所有者chownchown 命令可以修改文件的属主，也可以修改文件属组，格式：chown [OPTION]... [OWNER][:[GROUP]] FILE...chown [OPTION]... --reference=RFILE FILE...用法说明：OWNER           #只修改所有者OWNER:GROUP     #同时修改所有者和属组:GROUP          #只修改属组，冒号也可用 . 替换--reference=RFILE  #参考指定的的属性，来修改   -R              #递归，此选项慎用，非常危险！</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/22.PNG" class=""><div class="code-wrapper"><pre><code class="hljs"># 4.1.2、设置文件的属组信息chgrpchgrp 命令可以只修改文件的属组，格式：chgrp [OPTION]... GROUP FILE... chgrp [OPTION]... --reference=RFILE FILE...</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/23.PNG" class="">  <h1 id="4-2、文件权限"><a href="#4-2、文件权限" class="headerlink" title="4.2、文件权限"></a>4.2、文件权限</h1><div class="code-wrapper"><pre><code class="hljs"># 4.2.1、文件权限说明文件的权限主要针对三类对象进行定义：owner   属主, ugroup   属组, gother   其他, o注意：用户的最终权限，是从左向右进行顺序匹配，即，所有者，所属组，其他人，一旦匹配权限立即生效，不再向右查看其权限r和w权限对root 用户无效只要所有者,所属组或other三者之一有x权限,root就可以执行每个文件针对每类访问者都定义了三种权限：r   Readable  4w   Writable  2x   eXcutable 1对文件的权限：r   可使用文件查看类工具，比如：cat，可以获取其内容w   可修改其内容,文件的是否被删除和文件的权限无关x   可以把此文件提请内核启动为一个进程，即可以执行（运行）此文件（此文件的内容必须是可执行）文件权限常见组合--- 0r   4r-x 5rw  6rwx 7对目录的权限：r   可以使用ls查看此目录中文件名列表,但无法看到文件的属性meta信息,包括inode号,不能查看文件的内容w   可在此目录中创建文件，也可删除此目录中的文件，而和此被删除的文件的权限无关x   可以cd进入此目录，可以使用ls -l file或stat file 查看此目录中指定文件的元数据，当预先知道文件名称时,也可以查看文件的内容,属于目录的可访问的最小权限X   分配给目录或有部分x权限的文件的x权限，对无任意x权限的文件则不会分配x权限目录权限常见组合-   不能访问目录r-x 只读目录rwx 可读也可写目录</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/24.PNG" class="">  <div class="code-wrapper"><pre><code class="hljs"># 4.2.2、修改文件权限chmod格式：chmod [OPTION]... MODE[,MODE]... FILE...chmod [OPTION]... OCTAL-MODE FILE...#参考RFILE文件的权限，将FILE的修改为同RFILEchmod [OPTION]... --reference=RFILE FILE...模式法格式：MODE：who opt permissionwho:u,g,o,a opt:+,-,=permission:r,w,x修改指定一类用户的所有权限u=  g= o= ug=  a= u=,g=修改指定一类用户某个或某个权限u+  u- g+ g- o+ o- a+ a- + --R: 递归修改权限</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/25.PNG" class=""><h1 id="4-3、新建文件和目录的默认权限"><a href="#4-3、新建文件和目录的默认权限" class="headerlink" title="4.3、新建文件和目录的默认权限"></a>4.3、新建文件和目录的默认权限</h1><p>   umask 的值可以用来保留在创建文件权限，实现方式：<br>   新建文件的默认权限: 666-umask，如果所得结果某位存在执行（奇数）权限，则将其权限+1,偶数不变<br>   新建目录的默认权限: 777-umask<br>   非特权用户umask默认是 002，注：Rocky上非特权用户的umask和root一致，都为022<br>   root的umask 默认是 022<br>   查看umask</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/26.PNG" class=""><h1 id="4-4、linux文件系统上的特殊权限"><a href="#4-4、linux文件系统上的特殊权限" class="headerlink" title="4.4、linux文件系统上的特殊权限"></a>4.4、linux文件系统上的特殊权限</h1><p>   前面介绍了三种常见的权限：r, w, x  还有三种特殊权限：SUID, SGID, Sticky特殊权限。<br>   SUID 作用于二进制可执行文件上,用户将继承此程序所有者的权限；<br>   SGID 作用于二进制可执行文件上,用户将继承此程序所有组的权限作于于目录上, 此目录中新建的文件的所属组将自动从此目录继承；<br>   STICKY 作用于目录上,此目录中的文件只能由所有者自已来删除。<br>     # 4.4.1、特殊权限SUID<br>     前提：进程有属主和属组；文件有属主和属组<br>     1）、任何一个可执行程序文件能不能启动为进程,取决发起者对程序文件是否拥有执行权限；<br>     2）、启动为进程之后，其进程的属主为发起者,进程的属组为发起者所属的组；<br>     3）、进程访问文件时的权限，取决于进程的发起者。<br>     二进制的可执行文件上SUID权限功能：<br>     1）、任何一个可执行程序文件能不能启动为进程：取决发起者对程序文件是否拥有执行权限<br>     2）、启动为进程之后，其进程的属主为原程序文件的属主<br>     3）、SUID只对二进制可执行程序有效<br>     4）、SUID设置在目录上无意义<br>     SUID权限设定：<br>     chmod u+s FILE…<br>     chmod 4xxx FILE<br>     chmod u-s FILE…</p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/27.PNG" class=""><div class="code-wrapper"><pre><code class="hljs"> # 4.4.2、特殊权限SGID 二进制的可执行文件上SGID权限功能： 1）、任何一个可执行程序文件能不能启动为进程：取决发起者对程序文件是否拥有执行权限 2）、启动为进程之后，其进程的属组为原程序文件的属组 SGID权限设定：     chmod g+s FILE...  chmod 2xxx FILE chmod g-s FILE...     目录上的SGID权限功能： 默认情况下，用户创建文件时，其属组为此用户所属的主组，一旦某目录被设定了SGID，则对此目录有写权限的用户在此目录中创建的文件所属的组为此目录的属组， 通常用于创建一个协作目录     SGID权限设定： chmod g+s DIR... chmod 2xxx DIR chmod g-s DIR...      # 4.4.3、特殊权限 Sticky 位 具有写权限的目录通常用户可以删除该目录中的任何文件，无论该文件的权限或拥有权 在目录设置Sticky 位，只有文件的所有者或root可以删除该文件 sticky 设置在文件上无意义。  Sticky权限设定：  chmod o+t DIR...  chmod 1xxx DIR  chmod o-t DIR...</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/28.PNG" class=""><div class="code-wrapper"><pre><code class="hljs"> # 4.4.4、特殊权限数字法 SUID SGID STICKY 000 0 001 1 010 2 011 3 100 4 101 5 110 6 111 7      权限位映射： SUID: user,占据属主的执行权限位   s：属主拥有x权限     S：属主没有x权限  SGID: group,占据属组的执行权限位   s： group拥有x权限   S：group没有x权限   Sticky: other,占据other的执行权限位     t：other拥有x权限     T：other没有x权限</code></pre></div><h1 id="4-5、设定文件特殊属性"><a href="#4-5、设定文件特殊属性" class="headerlink" title="4.5、设定文件特殊属性"></a>4.5、设定文件特殊属性</h1><p>   设置文件的特殊属性，可以访问 root 用户误操作删除或修改文件不能删除，改名，更改。<br>   chattr +i file<br>   只能追加内容，不能删除，改名<br>   chattr +a file<br>   显示特定属性<br>   lsattr </p><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/29.PNG" class=""><h1 id="4-6、访问控制列表-ACL"><a href="#4-6、访问控制列表-ACL" class="headerlink" title="4.6、访问控制列表 ACL"></a>4.6、访问控制列表 ACL</h1><div class="code-wrapper"><pre><code class="hljs"> # 4.6.1、ACL权限功能 ACL：Access Control List，实现灵活的权限管理除了文件的所有者，所属组和其它人，可以对更多的用户设置权限。 ACL生效顺序：所有者，自定义用户，所属组|自定义组，其他人。 # 4.6.2、ACL相关命令 setfacl  可设置ACL权限 getfacl  可查看设置的ACL权限</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/30.PNG" class=""><div class="code-wrapper"><pre><code class="hljs"> mask权限 1）、mask只影响除所有者和other的之外的人和组的最大权限 2）、mask需要与用户的权限进行逻辑与运算后，才能变成有限的权限(Eﬀective  Permission) 3）、用户或组的设置必须存在于mask权限设定范围内才会生效     setfacl  -m mask::rx  file</code></pre></div><img src="/2022/08/01/%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/31.PNG" class="">     <div class="code-wrapper"><pre><code class="hljs"> --set选项会把原有的ACL项都删除，用新的替代，需要注意的是一定要包含UGO的设置，不能象-m一样只是添加ACL就可以 举例：setfacl --set u::rw,u:hp:rw,g::r,o::- f1.txt</code></pre></div><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FHS结构简述</title>
    <link href="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/"/>
    <url>/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1、什么是FHS"><a href="#1、什么是FHS" class="headerlink" title="1、什么是FHS"></a>1、什么是FHS</h1><p>  FHS，Filesystem Hierarchy Standard（文件系统层次化标准）的缩写，为大多数linux系统所采用的文件组织形式。其采用了树形结构组织文件。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/1.PNG" class=""><p>  如上图所示，FHS在其设计的树状结构中，定义了系统中每个区域的用途、所需要的最小构成文件以及目录，于此同时给出了例外处理以及矛盾处理。<br>  明细的FHS文档，可参阅<a href="https://www.pathname.com/fhs/">https://www.pathname.com/fhs/</a></p><h1 id="2、文件系统的目录结构"><a href="#2、文件系统的目录结构" class="headerlink" title="2、文件系统的目录结构"></a>2、文件系统的目录结构</h1><p>  在Linux中因为所有的东西都是以文件的方式进行操作，因此FHS结构定义的每一级结构都需要有相对应的访问方式。其与windows不同，在windows系统中，<br>  文件主要依靠盘符来进行访问，而linuc下的FHS结构，文件与目录被组织成一个单根倒置树结构，系统从根目录下开始，用“/”表示。因此文件可以依据参照对象不同，<br>  分为相对路径与绝对路径：<br>  绝对路径：以根目录为基准点，查找并访问其他资源<br>  举例：在根目录下查看网卡配置信息</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/2.PNG" class=""> <p>  相对路径：以当前路径为基准点，查找并访问其他资源<br>  举例：在/usr/share/目录下，查看网卡配置信息</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/3.PNG" class=""><p>  在日常使用中，只要找到路径即可，如果是一些配置文件，尽量写成绝对路径。</p><h1 id="3、分层文件系统简述"><a href="#3、分层文件系统简述" class="headerlink" title="3、分层文件系统简述"></a>3、分层文件系统简述</h1><p>  通过FHS2.3文档可以看到，在linux的系统中，有三个分区是比较特殊的<br>  1）、根分区：”/“<br>  2）、usr分区：”/usr”<br>  3）、var分区：”/var”<br>  下面逐个进行介绍：</p><h1 id="3-1、根分区："><a href="#3-1、根分区：" class="headerlink" title="3.1、根分区："></a>3.1、根分区：</h1><p>  所有的文件系统，都需要归属在跟目录下：包括如下的目录，或目录链接</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/4.PNG" class=""><p>  针对这些目录我们进行查看以及功能解释：（注：/usr与/var在后续分别讲解）<br>  /bin：bin是Binary的缩写, 这个目录存放着所有用户最经常使用的基本命令，不能关联至独立分区，OS启动就会用到的程序。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/5.PNG" class=""><p>  /boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，如内核文件（vmlinuz），引导记载器（bootloader,grub2）。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/6.PNG" class=""><p>  /dev：dev是Device(设备)的缩写, 该目录下存放的是Linux的设备文件特殊文件的存储位置，在Linux中访问设备的方式和访问文件的方式是相同的。<br>  其中文件类型为b：block device，随机访问；c: character device，线性访问。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/7.PNG" class=""><p>  /etc：这个目录用来存放所有的系统管理所需要的配置文件及其子目录（所有配置需要重启依然生效都需要保存在配置文件中）。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/8.PNG" class=""><p>  /lib：这个目录里存放着系统启动程序依赖的最基本的动态链接库及其内核模块文件（/lib/modules），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/9.PNG" class=""><p>  /media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。俗称便携式移动设备挂载点。<br>  /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/10.PNG" class=""><p>  注：当前很多镜像或光驱加载设备后，会被识别到/dev/sr0上，通过将dev/sr0挂载到/mnt目录下即可访问，如下举例，通过挂载Rocky9的镜像。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/11.PNG" class=""><p>  为何光驱默认识别到/dev/sr0上？其实通过查看该文件信息可以看到，该文件为/dev/cdrom的软连接。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/12.PNG" class=""><p>  /opt：这是给主机安装第三方软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。<br>  /sbin：s就是Super User的意思，这里存放的是系统管理员常使用的系统管理基本命令，与bin一致，不能关联至独立分区，OS启动即会用到的程序。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/13.PNG" class=""><p>  /srv：该目录存放一些服务启动之后需要提取的数据。<br>  /tmp：这个目录是用来存放一些临时文件的。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/14.PNG" class=""><p>  /home：普通用户的家目录，在Linux中，每个用户都有一个自己的家目录，一般该目录名是以用户的账号命名的。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/15.PNG" class=""><p>  /lib64：专用于x86_64系统上的辅助共享库文件存放位置。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/16.PNG" class=""><p>  /root：该目录为系统管理员的家目录，也称作超级权限者的用户主目录。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/17.PNG" class=""><p>  结合Rocky系统，我们再补充如下几个路径：<br>  /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，<br>  执行某些功能的修改，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br>  也可以查看CPU，内存信息，举例：</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/18.PNG" class=""><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/19.PNG" class=""><p>  /run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/20.PNG" class=""><p>  /sys：用于输出当前系统上硬件设备相关信息的虚拟文件系统。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/21.PNG" class=""><p>  /selinux: security enhanced Linux，selinux相关的安全策略等信息的存储位置。</p><h1 id="3-2、usr分区："><a href="#3-2、usr分区：" class="headerlink" title="3.2、usr分区："></a>3.2、usr分区：</h1><p>  /usr是文件系统的第二个主要部分。 /usr是可共享的只读数据。这意味着/usr应该可以在各种符合 FHS 的主机之间共享，并且不能被写入。任何特定于主机或随时间变化的信息都存储在其他地方。<br>  大型软件包不得使用/usr层次结构下的直接子目录。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/22.PNG" class=""><p>  由以上说明可知，usr下的数据universal shared, read-only data<br>  /usr/bin：保证系统拥有完整功能而提供的应用程序。根目录下的/bin实际上软链接至该目录<br>  /usr/sbin：保证系统拥有完整功能而提供的管理员应用程序。根目录下的/sbin实际上软链接至该目录<br>  /usr/lib：32位使用，根目录下的/lib实际上软链接至该目录<br>  /usr/lib64：只存在于64位系统使用，根目录下的/lib64实际上软链接至该目录</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/23.PNG" class=""><p>  /usr/include：C程序的头文件(header files)</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/24.PNG" class=""><p>  /usr/share：结构化独立的数据，例如doc, man等</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/25.PNG" class=""><p>  /usr/share/local：推荐的第三方应用程序的安装位置</p><h1 id="3-3、var分区："><a href="#3-3、var分区：" class="headerlink" title="3.3、var分区："></a>3.3、var分区：</h1><p>  /var包含可变数据文件。这包括假脱机目录和文件、管理和日志数据以及临时文件。/var的某些部分不能在不同系统之间共享。<br>  例如，/var/log、/var/lock和 /var/run。其他部分可以共享，特别是 /var/mail、/var/cache/man、/var/cache/fonts和 /var/spool/news。<br>  曾经进入/usr在系统操作期间写入的所有内容（与安装和软件维护相反）都必须在/var中。<br>  如果/var不能成为单独的分区，通常最好将/var移出根分区并移入/usr分区。（有时这样做是为了减小根分区的大小或当根分区中的空间不足时。）<br>  但是，/var不能链接到/usr，因为这会使/usr和/var的分离更加困难，并且很可能造成命名冲突。相反，可以将/var链接到/usr/var。<br>  应用程序通常不得将目录添加到/var的顶层。仅当此类目录具有系统范围的含义并与 FHS 邮件列表协商时，才应添加此类目录。</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/26.PNG" class=""> <p>  由FHS说明，可以得知/var: variable data files 可变数据文件<br>  /var/cache：应用程序缓存数据目录</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/27.PNG" class=""> <p>  /var/lib：应用程序状态信息数据<br>  /var/local：专用于为/usr/local下的应用程序存储可变数据<br>  /var/lock：锁文件</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/28.PNG" class=""> <p>  /var/log：日志目录及文件</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/29.PNG" class=""> <p>  /var/opt：专用于为/opt下的应用程序存储可变数据<br>  /var/run：运行中的进程相关数据,通常用于存储进程pid文件</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/30.PNG" class=""><p>  /var/spool：应用程序数据池</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/31.PNG" class=""><p>  /var/tmp：保存系统两次重启之间产生的临时数据</p><img src="/2022/08/01/FHS%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/32.PNG" class=""><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fstab文件说明</title>
    <link href="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="fstab文件是什么"><a href="#fstab文件是什么" class="headerlink" title="fstab文件是什么"></a>fstab文件是什么</h1><p>  linux的哲学思想之一：一切皆文件。也只有配置信息保存在文件中才能够确保设备掉电加电后配置一致，执行一致。<br>  而fstab正是为了解决文件系统挂载的配置文件。</p><h1 id="fstab文件的目录"><a href="#fstab文件的目录" class="headerlink" title="fstab文件的目录"></a>fstab文件的目录</h1><p>  如上所说，fstab是解决文件挂载的配置文件，结合FHS分层系统中分区的应用，我们可以得知fstab的路径在/etc目录下：<br>  /etc/fstab</p><h1 id="fstab文件说明"><a href="#fstab文件说明" class="headerlink" title="fstab文件说明"></a>fstab文件说明</h1><p>  首先我们来看一下fstab文件的组成</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/1.PNG" class=""><p>  如上图结构第12、13、14三行可以看到，fstab文件组成结构如下：<br>  fs_spec　                                      fs_file　fs_type　fs_options　fs_dump　fs_pass<br>  /dev/mapper/rl_bogon-root                         /       xfs     defaults      0        0<br>  UUID=d2114aae-4d96-4795-bef4-4bf6d6d4e6fd       /boot     xfs     defaults      0        0</p><p>  如上:<br>  1)、fs_spec：该段用于配置使用的挂载设备或文件，可以使用设备名称，也可以使用UUID。推荐使用UUID，这样系统删除或添加新硬件的时候<br>  UUID是始终不变的，如何查询设备UUID？可以使用如下三条命令：<br>  1、blkid<br>  2、lsblk -f<br>  3、ll /dev/disk/by-uuid/</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/2.PNG" class=""><p>  2）、fs_file：该段用于配置设备的挂载点，对于swap设备，该字段为none<br>  3）、fs_type：该段用于配置文件系统类型，常见的有xfs、ext4等。type类型查看：</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/3.PNG" class=""><p>  4）、fs_options：加载设备的文件系统的时候是否需要特定的参数选项，譬如noauto(当使用mount–a命令时不载入)，user(允许用户进行装载)，<br>  owner(允许设备所有人装载)，_netdev(设备需要网络)。如无特殊需求，默认选择defaults即可<br>  5）、fs_dump：该选项被”dump”命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0。<br>  6）、fs_pass-：该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统”/“对应该字段的值应该为1，其他文件系统应该为2。<br>  若该文件系统无需在启动时扫描则设置该字段为0。<br>  注意：/etc/fstab文件非常重要，在正常系统加载的时候，需要对该文件进行调用，如果输入有错误，将会导致设备无法加载。<br>  因此建议修改该配置文件一定要慎重，如果需要进行修改请进行备份。万一出现配置错误导致无法启动系统，请挂载系统镜像，通过Troubleshooting进入到紧急救援模式，修改该文件，恢复系统登录。<br>  操作步骤如下：<br>  1）、重启设备，进入bios或引导项，优选镜像启动，保存配置后重启。（VMware workstation通过F2按键，需要手速快一些）</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/4.PNG" class=""><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/5.PNG" class=""><p>  2）、设备重启后，在如下界面，快速使用键盘的上下按键，将选择项选定为Troubleshooting。</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/6.PNG" class=""><p>  3）、进入Troubleshooting界面后，选择Rescue a Rocky Linux system选项，并点击进去。</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/7.PNG" class=""><p>  4）、选择1）Continue</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/8.PNG" class=""><p>  5）、此时已经进入到Rescue Shell 救援Shell下，同时原有的主机系统全部挂载到了救援系统的/mnt/sysroot/路径下，单机ENTER回车确认</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/9.PNG" class=""><p>  6）、此时通过路径/mnt/sysroot/etc/fstab，便可以看到原系统的fstab文件及其内容。</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/10.PNG" class=""><p>  7）、通过 vi /mnt/sysroot/etc/fstab，修改之前添加错误的文件挂载陪之后，wq保存，随后重启系统即可</p><img src="/2022/08/01/fstab%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/11.PNG" class=""><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux帮助文档使用</title>
    <link href="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Linux命令学习"><a href="#1、Linux命令学习" class="headerlink" title="1、Linux命令学习"></a>1、Linux命令学习</h1><p>  linux系统的学习是一个系统化的学习，除了需要学习Linux的哲学思想意外，更重要的是能够学会如何获取帮助。毕竟发展至今，Linux上的<br>  应用、工具等已经数不胜数，单靠记忆是不足以帮助我们理解linux，更多的时候还会让我们产生厌倦的清晰。<br>  如何更好的学习linux，就从linux命令学习起来。</p><h1 id="2、shell中可以执行的命令种类"><a href="#2、shell中可以执行的命令种类" class="headerlink" title="2、shell中可以执行的命令种类"></a>2、shell中可以执行的命令种类</h1><p>  在linux的shell环境里，可以执行的命令可以分为两类：<br>  内建命令：由shell程序自带，通过命令的形式提供，当用户登录后会自动加载并常驻在内存中<br>  外部命令：在文件系统的路径下由对应的可执行程序文件，只有执行命令的时候才从磁盘上的路径加载至内存中，执行完毕后从内存中删除<br>  如何区别命令是内建命令还是外部命令呢：<br>  type COMMAND<br>  举例：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/1.PNG" class=""><p>  如上可知，通过type命令查看后，提示builtin的均为内建命令，给出路径的均为外部命令。<br>  注：type除了可以查看是内建命令、外部命令外，还可能查看出是否alias别名命令，如：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/2.PNG" class=""><h1 id="3、内建命令获取帮助"><a href="#3、内建命令获取帮助" class="headerlink" title="3、内建命令获取帮助"></a>3、内建命令获取帮助</h1><p>  内建命令获取帮助的命令是：<br>  help COMMAND<br>  举例：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/3.PNG" class=""><p>  通过该命令，我们即可明白内建命令是如何使用，以及对应命令参数的使用方法<br>  补充说明：<br>  linux中的命令格式如下：<br>  COMMAND [OPTIONS…] [ARGUMENTS…]<br>  COMMAND [COMMAND] [COMMAND] ….<br>  其中 OPTIONS选项：用于启用或关闭命令的某个或某些功能<br>       使用风格有三种：<br>       1、短选项：UNIX 风格选项，-c 例如：-l, -h<br>       2、长选项：GNU风格选项，–word 例如：–all, –human<br>       3、BSD风格选项： 一个字母，例如：a，使用相对较少<br>       ARGUMENTS参数：命令的作用对象，譬如文件名、用户名等<br>    举例：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/4.PNG" class=""><h1 id="4、外部命令路径、简短描述获取"><a href="#4、外部命令路径、简短描述获取" class="headerlink" title="4、外部命令路径、简短描述获取"></a>4、外部命令路径、简短描述获取</h1><p>   由上文介绍可知，外部命令是通过文件系统路径下的可执行文件加载到内存中的，因此我们也需要明确能够查出命令的相关路径：<br>   which -a<br>   whereis<br>   举例：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/5.PNG" class=""><p>   如上可以看到which -a可以跳过alias别名，查到外部命令的实际路径。whereis 命令除了路径查询外，还会将该命令的MAN命令存放路径查到<br>   除此以外，我们还有一个工具命令whatis，使用数据库来显示命令的简短描述：<br>   注：该工具初始安装后不能使用，需要制作数据库后方能使用。</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/6.PNG" class=""><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/7.PNG" class=""><h1 id="5、外部命令帮助获取"><a href="#5、外部命令帮助获取" class="headerlink" title="5、外部命令帮助获取"></a>5、外部命令帮助获取</h1><p>   相比较内建命令的帮助获取，外部命令的帮助获取方法较多<br>   1）、COMMAND –help或COMMAND -h<br>   举例：</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/8.PNG" class="">  <img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/9.PNG" class=""> <p>   2）、使用程序自身携带的帮助文档，如README、INSTALL等<br>   3）、程序官方文档、CSDN等技术论坛、百度或者google搜索引擎<br>   4）、使用MAN命令（manual）：man COMMAND<br>      说明：man说明文件存放在/usr/share/man下</p><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/10.PNG" class=""> <div class="code-wrapper"><pre><code class="hljs">   man文件分为不同类型的帮助，也称为不同的章节，且每个章节作用描述不同：</code></pre></div><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/11.PNG" class=""><div class="code-wrapper"><pre><code class="hljs">   如上图：共分为9个章节，功能如下：   1）、用户命令   2）、系统调用   3）、C库调用   4）、设备以及特殊文件   5）、配置文件格式   6）、游戏   7）、杂项   8）、管理类命令   9）、Linux内核API   且在不同章节中存在有对应命令的使用指导，其中有几个符号需需要关注：   &lt;&gt; 代表尖括号内选项为必选项    [] 代表方括号内选项为可选项   ... 代表同一类内容可以出现多次   a|b 代表二选一   &#123;&#125; 代表分组  通过如上说明，我们指导了man命令的不同章节，那么回顾上文，我们通过whatis查看到了对应命令的简短描述</code></pre></div><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/7.PNG" class=""><div class="code-wrapper"><pre><code class="hljs">  其中cal（1），即代表通过第一章节查看命令具体说明，举例：</code></pre></div><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/12.PNG" class=""><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/13.PNG" class=""><div class="code-wrapper"><pre><code class="hljs">5）、info命令查看信息页：info COMMANDinfo命令需要完成安装，默认在CentOS或Rocky的安装包BaseOS/Packages/i/路径下可以找到安装包，完成安装后即可使用举例：</code></pre></div><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/14.PNG" class=""><img src="/2022/08/01/linux%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/15.PNG" class=""><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rocky与Ubuntu系统安装</title>
    <link href="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1、CentOS系统"><a href="#1、CentOS系统" class="headerlink" title="1、CentOS系统"></a>1、CentOS系统</h1><p>  Red Hat公司是全球著名开源解决方案供应商，最为人所熟知的产品莫过于RHEL系统。该产品遵循GPL，因此可以免费使用，但红帽公司提供的服务不免费。<br>  为了能够使用一款稳定且具有一定服务支持的操作系统，CentOS应运而生，其诞生之初就是作为RHEL产品的下游，确保在RHEL发布版本后一段时间（一般为6个月左右），<br>  依据RHEL开放源码编译而出，此时的CentOS系统相对稳定且针对产品漏洞有了一定修补，更适合生产环境。</p><h1 id="2、CentOS的转变"><a href="#2、CentOS的转变" class="headerlink" title="2、CentOS的转变"></a>2、CentOS的转变</h1><p>  CentOS在2014年宣布加入RedHat，CentOS的几个核心团队入职Red Hat专门负责其开发。并在Red Hat在理事会中占了三席，但是其社区属性得到保留，<br>  交易结果是一部分包括将CentOS商标和IP转移到Red Hat，公司的性质也就随之有所变化。至2018年10月29日，IBM以300多亿美金收购RedHat，承诺Red Hat忠于其开源根基不会改变，<br>  声称” Red Hat对开源的使命和坚定承诺将保持不变。”。然而在2020年12月8日，RedHat宣布停止开发CentOS8，且提前在2年内终结技术支持，转而开发CentOS的变体，<br>  称之为“CentOS Stream”。这样的操作影响是深远的：CentOS从原有RHEL系统的下游，转为上游，可以说其与RHEL的原有关系做了对调，承担了更多的新功能测试，或者称之为Beta<br>  版RHEL更合适，这样开发与维护能力较弱的用户，再度使用CentOS就存在很大的风险。</p><h1 id="3、Rocky的诞生"><a href="#3、Rocky的诞生" class="headerlink" title="3、Rocky的诞生"></a>3、Rocky的诞生</h1><p>  在RedHat进行了该声明之后，原CentOS创始人发布呼吁，召集了一批技术人员，计划以创建一个新的操作系统项目来取代CentOS。最后用已故的CentOS创始人之一的Rocky命名。<br>  Rocky linux与RHEL完全兼容，目前已经创建了Github Rocky Linux 项目组织（github.com/rocky-linux/rocky）以及官网rockylinux.org</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/git.png" class=""><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/rocky.png" class=""><p>  注：为防止RedHat改CentOS为上游后，对已有资产产生安全影响，近两年非常多的用户已经开始去CentOS化，包括阿里云的产品上，已经将CentOS8等镜像移除。虽然CentOS名义上<br>  已经死亡，但Rocky会继承CentOS的“遗志”，继续传递CentOS的精神。（由于Rocky至今诞生仅两年半多，但相信在CentOS7后，会是平替CentOS的最佳选择）</p><h1 id="3-1、Rocky系统安装"><a href="#3-1、Rocky系统安装" class="headerlink" title="3.1、Rocky系统安装"></a>3.1、Rocky系统安装</h1><p>  目前通过官网可以看到，Rocky已经发布到9.0的版本:</p><p>  完成下载后，就可以加载镜像的方式进行安装。本次安装，使用Vmware Workstation进行操作</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm1.png" class=""><p>  创建虚拟机</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm2.PNG" class=""><p>  选择自定义</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm3.PNG" class=""><p>  按照默认</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm4.PNG" class=""><p>  选择稍后安装操作系统</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm5.png" class=""><p>  客户机操作系统选择 Linux ，这里先选择CentOS8 64位</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm6.PNG" class=""><p>  设置虚拟机名称以及安装在本机的位置</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm7.PNG" class=""><p>  选择处理器CPU数量</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm8.PNG" class=""><p>  选择虚拟机内存</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm9.PNG" class=""><p>  网络类型选择默认NAT</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm10.PNG" class=""><p>  I/O控制器保持默认</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm11.PNG" class=""><p>  磁盘类型保持默认</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm12.PNG" class=""><p>  创建新磁盘</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm13.PNG" class=""><p>  选择磁盘大小后，建议选择将磁盘文件存储为单个文件</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm14.PNG" class=""><p>  保持默认系统生成的磁盘文件，点击下一步</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm15.PNG" class=""><p>  单击完成，完成虚拟机的创建</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm16.PNG" class=""><p>  该界面为创建好的虚拟机</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm17.PNG" class=""><p>  此时系统没有安装，因此需要进行系统的挂载以及安装，选择编辑虚拟机设置<br>  在虚拟机设置里，选择硬件CD/DVD，右侧选择使用ISO映像文件，点击浏览后，将目录路径选择到下载的Rocky9镜像的目录下，选择该镜像并点击打开</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm18.PNG" class=""><p>  在开机后，进入到安装界面，此时有三个选择，分别是安装、测试以及安装、故障排查三个选项，优选安装</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm19.png" class=""><p>  正在加载中</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm20.PNG" class=""><p>  进行语言选择，默认英语，这里其实可以看到Rocky与RHEL以及CentOS安装是一样的</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm21.PNG" class=""><p>  选择安装目的路径</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm22.PNG" class=""><p>  保持默认分区，选择Done</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm23.PNG" class=""><p>  选择软件安装项</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm24.PNG" class=""><p>  这里个人选择了最小化安装，图形化安装占用内存较大</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm25.PNG" class=""><p>  随后是时区选择，这里选择亚洲/上海</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm26.PNG" class=""><p>  最后设置ROOT账号密码</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm27.PNG" class=""><p>  除了设置密码，可以看到这里有个选择，如果不勾选，后续登陆后的root账户没有SSH权限。在这里我没有勾选，计划在安装完成后修改文件解决</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm28.PNG" class=""><p>  最后点击开始安装</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm29.PNG" class=""><p>  静待安装进行</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm30.PNG" class=""><p>  已经安装完成，选择reboot重启系统加载</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm31.png" class=""><p>  重启后可以看到操作系统的版本</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm32.PNG" class=""><p>  输入账号密码进行登录</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm33.PNG" class=""><p>  可以看到SSH远程登录通过root账号，系统是会拒绝的</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm34.PNG" class=""><p>  我们通过直接登录虚拟机，编辑/etc/ssh/sshd_config文件</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm35.PNG" class=""><p>  将#PermitRootLogin prohibit-password进行修改</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm36.PNG" class=""><p>  改为PermitRootLogin yes，随后保存退出。（注：Rocky9与Ubuntu在默认root用户无法ssh登录的情况下，修改方法一样）</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm37.PNG" class=""><p>  重启sshd服务</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/vm38.PNG" class=""><p>  此时就可以使用root账户ssh登录</p><h1 id="4、Ubuntu系统"><a href="#4、Ubuntu系统" class="headerlink" title="4、Ubuntu系统"></a>4、Ubuntu系统</h1><p>  提及Ubuntu系统就不得不说一下Debian系统。该系统是从 1993 年由 Ian Murdock(伊恩·默多克) 发起的，名字是由 Debian 的创始人<br>  Ian Murdock (伊恩·默多克) 和他的妻子Debra(黛布拉) 两人的名字组合而成的。<br>  早期Debian有三个版本：不稳定版、测试版、稳定版。这三个分支各具特点，其中不稳定版用于最新功能的开发、测试，待使用相对稳定后<br>  转为测试版，进而至稳定版。Ubuntu则是在不稳定版的分支上发展而来。<br>  与Debian的不同在于它每6个月会发布一个新版本，Ubuntu的目标在于为一般用户提供一个最新的、同时又相当稳定的主要由自由软件构建而成的操作系统</p><h1 id="5、Ubuntu的发展"><a href="#5、Ubuntu的发展" class="headerlink" title="5、Ubuntu的发展"></a>5、Ubuntu的发展</h1><p>  Ubuntu第一个版本是发布于 2004 年10月20日，ubuntu的版本号有个固定的特征，其使用一个形容词和一个动物名称组成，并且形容词和名词的首字母都是一致的，<br>  Ubuntu版本的命名规则是根据正式版发布的年月命名，我们可以很容易的从版本号码就知道正式发布的时间。<br>  每两年的 4 月份，都会推出一个长期支持版本（LTS），其支持期长达五年，而非 LTS 版本的支持期通常只有半年。</p><h1 id="6、Ubuntu的机遇"><a href="#6、Ubuntu的机遇" class="headerlink" title="6、Ubuntu的机遇"></a>6、Ubuntu的机遇</h1><p>  Ubuntu系统对于桌面系统的推广有着无语伦比的贡献，同时因为针对云服务商的技术架构内核和系统更新很快，因此是目前主流的操作系统之一，同时因为RedHat对于<br>  CentOS的改变，Ubuntu将会进一步抢占原有CentOS的市场，正如Ubuntu官网所述：（<a href="https://ubuntu.com/blog/migrating-to-ubuntu-lts-six-facts-for-centos-users%EF%BC%89">https://ubuntu.com/blog/migrating-to-ubuntu-lts-six-facts-for-centos-users）</a></p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u1.png" class=""><p>  事实 1. 开发人员更喜欢 Ubuntu<br>  事实 2. Ubuntu LTS 是可预测的、稳定的和安全的<br>  事实 3. Ubuntu 没有强制订阅<br>  事实 4. Ubuntu LTS 通过透明的每台机器定价提供企业级支持<br>  事实 5. Ubuntu 提供多云体验<br>  事实 6. Ubuntu 为大型基础设施提供动力</p><h1 id="6-1、Ubuntu体统安装"><a href="#6-1、Ubuntu体统安装" class="headerlink" title="6.1、Ubuntu体统安装"></a>6.1、Ubuntu体统安装</h1><p>  本次安装，使用Vmware，系统选择为服务器版本，登录官网<a href="https://cn.ubuntu.com/download/server/step1">https://cn.ubuntu.com/download/server/step1</a></p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u2.PNG" class=""><p>  虚拟机的准备与Rocky一致，这里不再赘述，其中在选择操作系统的时候，略有不同，应选择为Ubuntu 64位</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u3.PNG" class=""><p>  依据Rocky的经验，选择完系统后，我们得到如下：</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u4.PNG" class=""><p>  点击开启虚拟机</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u5.PNG" class=""><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u7.PNG" class=""><p>  选择默认英文部署</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u8.PNG" class=""><p>  选择继续不升级，可在部署完成后升级。该部如果选择升级可能会导致安装及其缓慢</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u9.PNG" class=""><p>  选择Done</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u10.PNG" class=""><p>  通过tab键，选择minimized（与Rocky一致），点击Done</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u11.PNG" class=""><p>  此处使用默认DHCP，如果有需求可以改为静态，bond配置也可以在此处配置</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u12.PNG" class=""><p>  此处不设置代理，默认Done</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u13.PNG" class=""><p>  更改国外源为阿里云的源，这样下载更新速度会更快</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u14.PNG" class=""><p>  保持磁盘分区以及格式为默认</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u15.PNG" class=""><p>  检查分区无误后，选择Done</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u16.PNG" class=""><p>  选择确认</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u17.PNG" class=""><p>  设置个人名称、服务器名称以及用户名、密码</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u18.PNG" class=""><p>  注意：请使用tab键勾选install Openssh server ，否则后续无法使用ssh服务</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u19.PNG" class=""><p>  此处可以选择服务器的Snaps，这里我默认使用Tab键跳过（snap是一种特殊的包管理，使用起来不友好，虽然从功能上非常棒且安全性高）</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u20.PNG" class=""><p>  系统开始安装，请等待</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u21.PNG" class=""><p>  系统安装完毕，重启</p><img src="/2022/08/01/Rocky%E4%B8%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/u22.PNG" class=""><p>  系统安装完毕，直接登录<br>  Ubuntu 系统安装完成</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别</title>
    <link href="/2022/07/31/linux%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/31/linux%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>  自上世纪80年代起，黑客社群在软件商业化的压力下，逐渐分崩瓦解，甚至不少黑客也自行抱团组织公司，试图通过软件专利取代黑客文化的产物—–自由软件的流通。<br>  在这种情况下，Richard Matthew Stallman发表了著名的GNU宣言并起草了广为使用的GNU通用公共协议（GNU General Public License，GNU GPL），创造性的提出了“反版权”，即Copyleft的概念，自此至今诞生出了多种多样的开源许可。</p><h1 id="开源许可明细表项"><a href="#开源许可明细表项" class="headerlink" title="开源许可明细表项"></a>开源许可明细表项</h1><p>  如下是来自github的开源项目choosealicense的整理成果，原文来自：<a href="https://choosealicense.com/appendix/">https://choosealicense.com/appendix/</a></p><img src="/2022/07/31/linux%E5%AD%A6%E4%B9%A0/40.png" class=""><p>  Commercial use：商业用途 ；Distribution：发布、传播；Modification：修改；Patent use：专利使用 ；<br>  Private use：自用、私人使用 ；Disclose source：披露来源 ；License and copyright notice：许可以及版权声明 ； Network use is distribution：网络使用视同发布 ；<br>  Same license：相同授权 ；State changes：标注修改 ；Liability：承担责任 ；Trademark use：许可商标使用 ； Warranty：担保、保证；<br>  结合以上简单翻译与列表，我们可以选择适合自身需求的开源许可。</p><h1 id="主流的6个开源许可"><a href="#主流的6个开源许可" class="headerlink" title="主流的6个开源许可"></a>主流的6个开源许可</h1><p>  通过如上列表我们可以看到，在开源许可发展的这些年里，即使是开源许可也是有着相对严苛的授权限制，也就是说开源不等于免费使用、二次开发以及传播。<br>  由于目前的开源许可过多，在这里借用网上大神流传较久的一张图用来说明一下GPL、BSD、MIT、Mozilla、Apache和LGPL的区别：</p><img src="/2022/07/31/linux%E5%AD%A6%E4%B9%A0/xuke.png" class=""><h1 id="1、BSD许可"><a href="#1、BSD许可" class="headerlink" title="1、BSD许可"></a>1、BSD许可</h1><div class="code-wrapper"><pre><code class="hljs">BSD开源协议拥有较大自由的协议。基本上可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。但发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发需要满足一定的条件：1）、如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。2）、如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。3）、不可以用开源代码的作者、机构名字和原来产品的名字做市场推广。BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</code></pre></div><h1 id="2、MIT许可"><a href="#2、MIT许可" class="headerlink" title="2、MIT许可"></a>2、MIT许可</h1><div class="code-wrapper"><pre><code class="hljs">通过开源许可图里的类比，我们可以看到MIT与BSD极为相似，且比较BSD而言更加宽松，甚至可以用自己公司的名字进行促销、销售。</code></pre></div><h1 id="3、Apache许可"><a href="#3、Apache许可" class="headerlink" title="3、Apache许可"></a>3、Apache许可</h1><div class="code-wrapper"><pre><code class="hljs">Apache为某开源软件基金会使用的授权协议，类比BSD、MIT，整体还是比较相近的，差别在于修改的版权都需要保留说明，且该说明必须在原有Apache许可的范围内。</code></pre></div><h1 id="4、Mozilla许可"><a href="#4、Mozilla许可" class="headerlink" title="4、Mozilla许可"></a>4、Mozilla许可</h1><div class="code-wrapper"><pre><code class="hljs">Mozilla许可允许修改源码，但是改后的代码依然归原作者所有，且需要提供对于源码修改的文档。</code></pre></div><h1 id="5、GPL许可"><a href="#5、GPL许可" class="headerlink" title="5、GPL许可"></a>5、GPL许可</h1><div class="code-wrapper"><pre><code class="hljs">GPL许可允许任何人修改、传播程序软件里的源码，如果修改了源码，依然保留原来的许可，也就是说代码也要公开，不得用于商业软件发布和销售。严重约束了有能力的公司以及个人参与的意愿，但同时也让我们可以免费享受到Centos、Ubuntu、Rocky等linux，以及使用该许可下的免费软件。</code></pre></div><h1 id="6、LGPL许可"><a href="#6、LGPL许可" class="headerlink" title="6、LGPL许可"></a>6、LGPL许可</h1><div class="code-wrapper"><pre><code class="hljs">LGPL许可允许以动态链接库调用的方式免费使用，但是如果进行了源码的修改，与Mozilla、GPL一致，依然需要进行开源。</code></pre></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><div class="code-wrapper"><pre><code class="hljs">宗上所述，我们可以看到从开源许可的宽松程度上比较：MIT&gt;BSD&gt;Apache&gt;LGPL&gt;Mozilla&gt;GPL 。引用CSDN博客作者烫青菜的一张图，说明几个许可的区别，原文：https://blog.csdn.net/weixin_39766005/article/details/120304450</code></pre></div><img src="/2022/07/31/linux%E5%AD%A6%E4%B9%A0/leibi.png" class=""><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
